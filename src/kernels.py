#!/usr/bin/python
# -*- coding: utf-8 -*-


#----------------------------------------------------------------------------------------------#
# LIBRARIES
#----------------------------------------------------------------------------------------------#

import numpy as np # To work with arrays and matrices


#----------------------------------------------------------------------------------------------#
# MAIN CODE
#----------------------------------------------------------------------------------------------#

def cosine_similarity_kernel(x, y):
    return np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y))

#----------------------------------------------------------------------------------------------#

def sigmoid_kernel(x, y, a, b): # a and b are real
    return np.tanh(a * np.dot(x, y) + b)

#----------------------------------------------------------------------------------------------#

def polynomial_kernel(x, y, a, b, n): # n is natural and b >= 0
    return (a * np.dot(x, y) + b) ** n

#----------------------------------------------------------------------------------------------#

def gaussian_kernel(x, y, sigma): # sigma is an array
    return np.e ** ( - 1 / 2 * np.dot((x - y) ** 2, sigma ** -2))

#----------------------------------------------------------------------------------------------#

def laplacian_kernel(x, y, sigma): # sigma is a scalar
    return np.e ** (-np.linalg.norm(x - y) / sigma)


#----------------------------------------------------------------------------------------------#
# MAIN SCRIPT
#----------------------------------------------------------------------------------------------#

if __name__ == '__main__':

    x_k = [1, 2, -3]
    x_l = [2, -1, 5]

    a = 5
    b = 2
    n = 3

    sigma   = 0.2
    sigma_i = [0.5, 0.7, 0.9]

    x = np.array(x_k)
    y = np.array(x_l)

    sigma_i_array = np.array(sigma_i)

    k1 = cosine_similarity_kernel(x, y)
    k2 = sigmoid_kernel(x, y, a, b)
    k3 = polynomial_kernel(x, y, a, b, n)
    k4 = gaussian_kernel(x, y, sigma_i_array)
    k5 = laplacian_kernel(x, y, sigma)


#----------------------------------------------------------------------------------------------#
# End of File (EOF)
#----------------------------------------------------------------------------------------------#